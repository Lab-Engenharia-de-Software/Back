datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

//EXEMPLOS PRA TESTAR O BAGULHO (TEM Q VER SE ISSO APARECE NA TABLEA DO BANCO QUANDO INICIAR O CLIENT)
model adm {
  id       Int      @id @default(autoincrement())
  email    String   @unique @db.VarChar(255)
  senha    String   @db.VarChar(255)
  nome     String   @db.VarChar(255)
  cpf      String   @unique @db.VarChar(255)
  telefone String   @db.VarChar(255)
  endereco String   @db.VarChar(255)
  role     String   @db.VarChar(255)
  status   String   @db.VarChar(255)
}

model pesquisadores{
  id         Int      @id @default(autoincrement())
  email      String   @unique @db.VarChar(255)
  senha      String   @db.VarChar(255)
  nome       String   @db.VarChar(255)
  cpf        String   @unique @db.VarChar(255)
  telefone   String   @db.VarChar(255)
  endereco   String   @db.VarChar(255)
  role       String   @db.VarChar(255) //pesquisador/secretaria/admin (token de login)
  status     String   @db.VarChar(255) //status de cadastro (aprovado, pesquisador, presidente)
  sexo       String   @db.VarChar(255)
  nascimento DateTime @db.DateTime(0)
  area       String   @db.VarChar(255)//area de pesquisa

  candidato urnas? //relação 1-1 caso seja candidato
  votos votos[]
//posteriormente adicionar os documentos na relação como: documentos documentos[]
}

model secretarias{
  id       Int      @id @default(autoincrement())
  email    String   @unique @db.VarChar(255)
  senha    String   @db.VarChar(255)
  nome     String   @db.VarChar(255)
  cpf      String   @unique @db.VarChar(255)
  telefone String   @db.VarChar(255)
  endereco String   @db.VarChar(255)
  role     String   @db.VarChar(255) //secretaria
}

model bioterios {
  id Int @id @default(autoincrement())
  nome String @db.VarChar(255)
  status String @db.VarChar(255)
  qntEspecies Int
  especies especies[]
}

model especies {
  id Int @id @default(autoincrement())
  nome String @db.VarChar(255)
  quantidade Int 
  bioterio bioterios @relation(fields: [bioterioId], references: [id])
  bioterioId Int
}

//relação n-1
model urnas {
  id Int @id @default(autoincrement())
  tipo String @db.VarChar(255) //presidente ou documento
  status String @db.VarChar(255) //aberto ou fechado
  candidato pesquisadores @relation(fields: [candidatoId], references: [id])
  candidatoId Int //id do candidato nesta urna
  //documento documentos 

  qntVotoSim Int //quantidade de votos afavor
  qntVotoNao Int //quantidade de votos contra
  minVotos Int //quantidade minima de votos para encerrar a votação
  lastId Int //restringir novos cadastro de entrar na votação
  
  votos votos[]
}

model votos { //para controlar se ja foi votado 
  id Int @id @default(autoincrement())
  voto Int //0 = nao, 1 == sim
  eleitor pesquisadores @relation(fields: [eleitorId], references: [id])
  urna urnas @relation(fields: [urnaId], references: [id])
  urnaId Int
  eleitorId Int
}




//tabela de pendencias que devam conter cadastros e solicitações 